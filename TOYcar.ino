// wemos esp32-s2 mini board
#pragma once
#include <Arduino.h>
#include "esp32-hal-ledc.h"

#define DEBUG_SERIAL
 #ifdef DEBUG_SERIAL
   #define DEBUG_PRINTLN(x) Serial.println(x)
   #define DEBUG_PRINT(x)   Serial.print(x)
   #include <serial_input.h>
 #else
   #define DEBUG_PRINTLN(x)
   #define DEBUG_PRINT(x)
 #endif

//
#include <ESP32Servo.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ArduinoJson.h>

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Wi-Fi
const char* ssid = "MasterNET";
const char* password = "ZakvaskA600";

// –í—Ö—ñ–¥–Ω—ñ –ø—ñ–Ω–∏
#define PIN_SWITCH1 3
#define PIN_SWITCH2 5
#define PIN_PEDAL   7

// –í–∏—Ö—ñ–¥–Ω—ñ –ø—ñ–Ω–∏
#define PIN_SERVO_POWER 16
#define PIN_SERVO_PWM   18
#define PIN_HEADLIGHT   33

#define PIN_MOTOR_IN1   35
#define PIN_MOTOR_IN2   37
//#define PIN_MOTOR_EN    39

//–í–µ–± –∫–µ—Ä—É–≤–∞–Ω–Ω—è
unsigned long lastWebCommandTime = 0;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–æ
int servoMinAngle = 45;
int servoMaxAngle = 135;
int neutralServoAngle = 90; // "–Ω—É–ª—å–æ–≤–∏–π" –∫—É—Ç
enum ServoMode { SERVO_SOFT, SERVO_HARD, SERVO_HOLD_ZERO };
ServoMode servoMode = SERVO_SOFT;  // —Ç–∏–ø —Ä–µ–∂–∏–º—É
ServoMode previousServoMode = SERVO_SOFT;  // –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–∂–∏–º—É

// –î–≤–∏–≥—É–Ω
int webMotorSpeed = 0;    // –ó–∞–¥–∞–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (–≤—ñ–¥ 0 –¥–æ 100)
int currentSpeed = 0;  // –ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ—Ç–æ—Ä–∞
int targetSpeed =0;
int motorMaxSpeed = 100;       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (100% = 255 –¥–ª—è PWM)
int accelerationRate = 4;   // –ö—Ä–æ–∫ –Ω–∞—Ä–æ—â–µ–Ω–Ω—è –®–ò–ú
unsigned long motorUpdateInterval=5; // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—Ä–æ—â–µ–Ω–Ω—è –®–ò–ú, –∫–æ–∂–Ω—ñ —Ö –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
bool forwardflag = 0;
bool reverseflag = 0;
bool stopflag = 1;
unsigned long lastMotorUpdate=0;

#define PWM_FREQ 5000     // 5 kHz (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ—Ç–æ—Ä—ñ–≤)
#define PWM_RESOLUTION 8  // 8 –±—ñ—Ç (–∑–Ω–∞—á–µ–Ω–Ω—è 0-255)

//unsigned long previousMillis = 0;

//–∫–µ—Ä—É–≤–∞–Ω–Ω—è
bool pedalStableState;
bool switch1StableState;
bool switch2StableState;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 100;
bool headlightOn = false;


// Servo –∫–µ—Ä—É–≤–∞–Ω–Ω—è
Servo steeringServo;
int currentServoAngle = 90;
int lastServoAngle = -1;
bool lastServoPowerState = false;
bool servoEnabled = false;
int previousServoAngle = 90;
unsigned long servoTurnStartTime = 0;
unsigned long servoTurnDuration = 0;

// –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
int lastReportedSpeed = -1;
bool lastReverseState = false;

//web –∫–µ—Ä—É–≤–∞–Ω–Ω—è
bool motorControlIntercepted = false;  // –Ü–Ω—Ç–µ—Ä—Ü–µ–ø—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –≤–µ–±
unsigned long webControlTimeout = 2000;  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–µ–±-–∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ—Ç–æ—Ä–æ–º

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 80
AsyncWebServer server(80);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WebSocket –Ω–∞ —à–ª—è—Ö—É /ws
AsyncWebSocket ws("/ws");

    //—Å–µ—Ä–≤–æ
void enableServo() {
  digitalWrite(PIN_SERVO_POWER, HIGH);
  servoEnabled = true;
  DEBUG_PRINTLN("–°–µ—Ä–≤–∞ –≤–∫–ª");
 }

void disableServo() {
  digitalWrite(PIN_SERVO_POWER, LOW);
  servoEnabled = false;
  DEBUG_PRINTLN("–°–µ—Ä–≤–∞ –≤–∏–∫–ª");
 }
//
void moveServoTo() {
  int angle = currentServoAngle;
  if (angle < servoMinAngle) angle = servoMinAngle;
  if (angle > servoMaxAngle) angle = servoMaxAngle;

  if (servoMode == SERVO_HARD || servoMode == SERVO_HOLD_ZERO) {
    enableServo();
    steeringServo.write(angle);
    DEBUG_PRINT("HARD –∫—É—Ç —Å–µ—Ä–≤–æ: ");
    DEBUG_PRINTLN(angle);
  } else if (servoMode == SERVO_SOFT) {
    int delta = abs(currentServoAngle - lastServoAngle);
    servoTurnDuration = (unsigned long)(delta * 1.83) + 100; // –º—Å
    servoTurnStartTime = millis();

    enableServo();
    steeringServo.write(angle);
  }

  lastServoAngle = currentServoAngle;
 }
//
 void updateServo() {
  if (servoMode == SERVO_SOFT && servoEnabled) {
    if (millis() - servoTurnStartTime > servoTurnDuration) {
      disableServo();  // –≤–∏–º–∏–∫–∞—î –∂–∏–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–∏

          DEBUG_PRINT("SOFT –∫—É—Ç —Å–µ—Ä–≤–æ: ");
          DEBUG_PRINTLN(currentServoAngle);
          DEBUG_PRINT("—á–∞—Å –ø–æ–≤–æ—Ä–æ—Ç—É, –º—Å: ");
          DEBUG_PRINTLN(servoTurnDuration);
          DEBUG_PRINTLN("–°–µ—Ä–≤–æ –≤–∏–º–∫–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É");
    }
  }
 }

void handleWebServoControl() {
  // –Ø–∫—â–æ –≤–∫–ª—é—á–µ–Ω–æ SERVO_HOLD_ZERO, –∑–∞–≤–∂–¥–∏ —Ñ–æ—Ä—Å—É–≤–∞—Ç–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –∫—É—Ç
  if (servoMode == SERVO_HOLD_ZERO) {
    if (currentServoAngle != neutralServoAngle) {
      currentServoAngle = neutralServoAngle;
      moveServoTo();
    }
  } else {
    // –î–ª—è —ñ–Ω—à–∏—Ö —Ä–µ–∂–∏–º—ñ–≤ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—É—Ç–∞
    if (currentServoAngle != lastServoAngle) {
      moveServoTo();
    }
  }
 }
//
    //–ú–æ—Ç–æ—Ä

void MotorForward(){
  if (reverseflag == 1){  // –Ø–∫—â–æ –Ω–∞–ø—Ä—è–º–æ–∫ –∑–º—ñ–Ω–∏–≤—Å—è
        stopMotor();  // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ—Ç–æ—Ä –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ø—Ä—è–º–∫—É
        delay(500);   // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é –Ω–∞–ø—Ä—è–º–∫—É
  }
  forwardflag = 1;
  reverseflag = 0;
  stopflag = 0;
 }
//
void MotorReverse(){
  if (forwardflag == 1){  // –Ø–∫—â–æ –Ω–∞–ø—Ä—è–º–æ–∫ –∑–º—ñ–Ω–∏–≤—Å—è
        stopMotor();  // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ—Ç–æ—Ä –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ø—Ä—è–º–∫—É
        delay(500);   // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é –Ω–∞–ø—Ä—è–º–∫—É
  }
  forwardflag = 0;
  reverseflag = 1;
  stopflag = 0;
  }
//
void stopMotor(){
  ledcWrite(PIN_MOTOR_IN1, 0);  //–≤–∏–∫–ª –≤–ø–µ—Ä–µ–¥
  ledcWrite(PIN_MOTOR_IN2, 0);  //–≤–∏–∫–ª –Ω–∞–∑–∞–¥
  currentSpeed = 0;           //–ø–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å 0
  targetSpeed = 0;
    if (stopflag == 0) {
      DEBUG_PRINTLN("–°–¢–û–ü");
      stopflag = 1;
      forwardflag = 0;
      reverseflag = 0;
  }
 }
//
void MotorUpdate(){
     if (millis() - lastMotorUpdate >= motorUpdateInterval) {
     lastMotorUpdate = millis();

     // –†—É—Ö–∞—î–º–æ currentSpeed –¥–æ targetSpeed
     if (currentSpeed < targetSpeed) {
      currentSpeed += accelerationRate;
      if (currentSpeed > targetSpeed) currentSpeed = targetSpeed;
      } else if (currentSpeed > targetSpeed) {
      currentSpeed = targetSpeed;  // –ú–∏—Ç—Ç—î–≤–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è

     }
      int pwmValue = map(currentSpeed, 0, 100, 0, 255);
     if (forwardflag == 1){
      ledcWrite(PIN_MOTOR_IN1, pwmValue);
      ledcWrite(PIN_MOTOR_IN2, 0);
     }
     if (reverseflag == 1){
      ledcWrite(PIN_MOTOR_IN1, 0);
      ledcWrite(PIN_MOTOR_IN2, pwmValue);
     }}}
//
//
void handleWebMotorControl() {
  // üîß –¢—É—Ç –∑–≥–æ–¥–æ–º —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—ñ–∫–∏ –≤–µ–±-–∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–≤–∏–≥—É–Ω–æ–º
    // ... –∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ ...
  lastWebCommandTime = millis(); // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –¥—ñ—ó
 }



//

//------–í–ï–ë----------
// === –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π WebSocket ===
void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client,
               AwsEventType type, void *arg, uint8_t *data, size_t len) {
  if (type == WS_EVT_DATA) {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø—Ä–∞–ø–æ—Ä—Ü—è –≤–µ–±‚Äë–∫–µ—Ä—É–≤–∞–Ω–Ω—è
    lastWebCommandTime = millis();
    motorControlIntercepted = true;
    
    // –ó–±–∏—Ä–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —É —Ä—è–¥–æ–∫
    String msg = "";
    for (size_t i = 0; i < len; i++) {
      msg += (char)data[i];
    }
    DEBUG_PRINT("–û—Ç—Ä–∏–º–∞–Ω–æ WS –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ");
    DEBUG_PRINTLN(msg);
    
    // –†–æ–∑–±—ñ—Ä JSON-–∫–æ–º–∞–Ω–¥–∏ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, –∫–ª—ñ—î–Ω—Ç –Ω–∞–¥—Å–∏–ª–∞—î JSON-—Ä—è–¥–æ–∫)
    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, msg);
    if (!error) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å–µ—Ä–≤–æ
      currentServoAngle = doc["servoX"] | currentServoAngle;
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º–æ—Ç–æ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—é)
      int motorSpeed = doc["servoY"] | 0;  // —è–∫—â–æ –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–∞–ª–∏—à–∞—î–º–æ 0
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
      motorControlIntercepted = doc["intercepted"] | false;
      
      // –û–±—Ä–æ–±–∫–∞ —Ä–µ–∂–∏–º—É ‚Äì —è–∫—â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∂–∏–º, –æ–±—Ä–æ–±–ª—è—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É:
      String modeParam = doc["mode"] | "SERVO_SOFT";
      if (modeParam == "SERVO_HOLD_ZERO") {
        if (servoMode != SERVO_HOLD_ZERO) {
          previousServoMode = servoMode;  // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∂–∏–º
        }
        servoMode = SERVO_HOLD_ZERO;
      } else if (modeParam == "SERVO_HARD" || modeParam == "SERVO_SOFT") {
        // –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏–ª–∏—Å—è –≤ —Ä–µ–∂–∏–º—ñ HOLD_ZERO, –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∂–∏–º
        if (servoMode == SERVO_HOLD_ZERO) {
          servoMode = previousServoMode;
        } else {
          servoMode = (modeParam == "SERVO_HARD") ? SERVO_HARD : SERVO_SOFT;
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Å–≤—ñ—Ç–ª–∞
      headlightOn = doc["light"] | false;
      digitalWrite(PIN_HEADLIGHT, headlightOn ? HIGH : LOW);
      
      // –û–±—Ä–æ–±–∫—É –º–æ—Ç–æ—Ä—É (MotorForward/MotorReverse) –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é,
      // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è motorSpeed.
      
    } else {
      DEBUG_PRINT("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON: ");
      DEBUG_PRINTLN(error.f_str());
    }
  }
}

// === HTTP-–æ–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (WebSocket –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–º—ñ—Å—Ç—å HTTP update) ===
void handleWEB(AsyncWebServerRequest *request) {
  String page = "<!DOCTYPE html><html lang='uk'><head><meta charset='UTF-8'>";
  page += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  page += "<title>ESP32 –ö–µ—Ä—É–≤–∞–Ω–Ω—è –†—É–ª–µ–º</title>";
  page += "<style>";
  page += "body { margin: 0; font-family: sans-serif; background: #f5f5f5; }";
  
  // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å
  page += "header { background: #333; color: white; padding: 10px 20px; }";
  page += "#titleBar { text-align: center; margin-bottom: 10px; }";
  page += "#titleBar h1 { margin: 0; font-size: 1.8em; }";
  page += "#statusBar { display: flex; justify-content: space-between; align-items: center; }";
  page += "#statusLeft { font-size: 0.9em; }";
  page += "#statusRight button { width: 40px; height: 40px; border: none; border-radius: 50%; background: #555; color: white; font-size: 1.5em; cursor: pointer; }";
  
  // –†—è–¥ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
  page += "#controlRow { display: flex; justify-content: space-between; padding: 10px 20px; background: #eee; }";
  page += "#controlRow button { width: 45px; height: 45px; border: none; border-radius: 50%; background: #007BFF; color: white; font-size: 1.5em; cursor: pointer; }";
  page += "#btnLight { background: #ffcc00; font-size: 1.8em; }";
  
  // –†—è–¥ —ñ–∑ —Å–ª–∞–π–¥–µ—Ä–æ–º
  page += "#sliderRow { text-align: center; margin: 10px 20px; }";
  page += "#sliderRow label { font-weight: bold; display: block; margin-bottom: 20px; }";
  page += "#sliderRow input[type='range'] { width: 80%; }";
  
  // –î–∂–æ–π—Å—Ç–∏–∫: –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞ –æ–±–ª–∞—Å—Ç—å + –∫—Ä—É–≥–ª–∏–π —Ñ–æ–Ω
  page += "#joystickContainer { position: relative; width: 320px; height: 320px; margin: 180px auto; }";
  page += "#joystickCircle { position: absolute; top: 50%; left: 50%; width: 400px; height: 400px; margin-left: -200px; margin-top: -200px; background: #ddd; border-radius: 50%; z-index: 0; pointer-events: none; }";
  page += "#joystickDot { position: absolute; width: 30px; height: 30px; background: #007BFF; border-radius: 50%; top: 50%; left: 50%; margin-left: -15px; margin-top: -15px; z-index: 10; pointer-events: none; }";
  
  // Overlay –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä—É–ª—è —Ç–∞ —Ä–µ–∂–∏–º—É —Å–µ—Ä–≤–∏
  page += ".overlay-btn { position: absolute; width: 60px; height: 60px; border: none; border-radius: 50%; background: #007BFF; color: white; font-size: 1.5em; cursor: pointer; display: flex; align-items: center; justify-content: center; z-index: 11; pointer-events: auto; }";
  page += ".left-btn { top: -75px; left: -15px; }";
  page += ".right-btn { top: -75px; right: -15px; }";
  
  page += "</style></head><body>";
  
  // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å—Ç–∞—Ç—É—Å–∞
  page += "<header>";
  page += "  <div id='titleBar'><h1>ESP32 –ö–µ—Ä—É–≤–∞–Ω–Ω—è –†—É–ª–µ–º</h1></div>";
  page += "  <div id='statusBar'>";
  page += "    <div id='statusLeft'>–ö—É—Ç —Ä—É–ª—è: <span id='angleDisplay'>90</span>¬∞<br>–®–≤–∏–¥–∫—ñ—Å—Ç—å: <span id='speedDisplay'>0</span></div>";
  page += "    <div id='statusRight'><button id='settingsButton' title='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'>‚öôÔ∏è</button></div>";
  page += "  </div>";
  page += "</header>";
  
  // –†—è–¥ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
  page += "<div id='controlRow'>";
  page += "  <button id='btnControl' onclick='toggleControl()'>‚úã</button>";
  page += "  <button id='btnLight' onclick='toggleLight()'>üí°</button>";
  page += "</div>";
  
  // –†—è–¥ —ñ–∑ —Å–ª–∞–π–¥–µ—Ä–æ–º
  page += "<div id='sliderRow'>";
  page += "  <label for='multiplierSlider'>–ú–∞–∫—Å —à–≤–∏–¥–∫—ñ—Å—Ç—å (–º–Ω–æ–∂–Ω–∏–∫ Y):</label>";
  page += "  <input type='range' id='multiplierSlider' min='0.5' max='1' step='0.05' value='1'>";
  page += "</div>";
  
  // –î–∂–æ–π—Å—Ç–∏–∫
  page += "<div id='joystickContainer'>";
  page += "  <div id='joystickCircle'></div>";
  page += "  <div id='joystickDot'></div>";
  page += "  <button id='lockButton' class='overlay-btn left-btn' title='–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä—É–ª—è'>üîì</button>";
  page += "  <button id='modeButton' class='overlay-btn right-btn' title='–†–µ–∂–∏–º —Å–µ—Ä–≤–∏'>üöô</button>";
  page += "</div>";
  
  // JavaScript-–∫–æ–¥: WebSocket —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π
  page += "<script>";
  // –û—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  page += "const minAngle = 45, maxAngle = 135;";
  page += "let angle = 90, speed = 0, multiplier = 1;";
  page += "const angleDisplay = document.getElementById('angleDisplay');";
  page += "const speedDisplay = document.getElementById('speedDisplay');";
  page += "function updateDisplay() { angleDisplay.textContent = angle; speedDisplay.textContent = speed; }";
  page += "updateDisplay();";
  
  // WebSocket-–∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
  page += "let intercepted = false, mode = 'SERVO_SOFT', light = false;";
  page += "let socket = new WebSocket('ws://' + window.location.hostname + '/ws');";
  page += "socket.onopen = function(){ console.log('WebSocket –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'); };";
  page += "socket.onmessage = function(event){ console.log('–û—Ç—Ä–∏–º–∞–Ω–æ WS –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ' + event.data); };";
  page += "socket.onerror = function(error){ console.error('WS –ø–æ–º–∏–ª–∫–∞', error); };";
  page += "socket.onclose = function(){ console.log('WebSocket –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ'); };";
  
  // –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ WS
  page += "function send() {";
  page += "  let x = document.getElementById('x') ? document.getElementById('x').value : 0;";
  page += "  let y = document.getElementById('y') ? document.getElementById('y').value : 0;";
  // –£ —Ü—å–æ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ –º–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –¥–∂–æ–π—Å—Ç–∏–∫, —Ç–æ–º—É WebSocket –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ:
  page += "  let cmd = { servoX: angle, servoY: speed, intercepted: intercepted, mode: mode, light: light };";
  page += "  socket.send(JSON.stringify(cmd));";
  page += "}";
  
  // –û–±—Ä–æ–±–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–∑–º—ñ–Ω–∞ —Å—Ç–∞–Ω—ñ–≤)
  page += "function toggleControl() { intercepted = !intercepted; ";
  page += "  document.getElementById('btnControl').innerText = intercepted ? '–í—ñ–¥–Ω—è—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è' : '–ü–µ—Ä–µ—Ö–æ–ø–∏—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è'; send(); }";
  page += "function toggleLight() { light = !light; document.getElementById('btnLight').innerText = light ? '–°–≤—ñ—Ç–ª–æ ON' : '–°–≤—ñ—Ç–ª–æ OFF'; send(); }";
  
  // –û–±—Ä–æ–±–∫–∞ overlay –∫–Ω–æ–ø–æ–∫
  page += "let lockState = false;";
  page += "document.getElementById('lockButton').addEventListener('pointerdown', function(e) { e.stopPropagation(); }, {capture: true});";
  page += "document.getElementById('lockButton').addEventListener('click', function(e) {";
  page += "  e.stopPropagation();";
  page += "  lockState = !lockState;";
  page += "  this.textContent = lockState ? 'üîí' : 'üîì';";
  page += "});";
  
  page += "let modeState = false;";
  page += "document.getElementById('modeButton').addEventListener('pointerdown', function(e) { e.stopPropagation(); }, {capture: true});";
  page += "document.getElementById('modeButton').addEventListener('click', function(e) {";
  page += "  e.stopPropagation();";
  page += "  modeState = !modeState;";
  page += "  this.textContent = modeState ? 'üöô!' : 'üöô';";
  page += "});";
  
  // –û–±—Ä–æ–±–∫–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –º–Ω–æ–∂–Ω–∏–∫–∞
  page += "document.getElementById('multiplierSlider').addEventListener('input', function() {";
  page += "  multiplier = parseFloat(this.value);";
  page += "  console.log('–ú–Ω–æ–∂–Ω–∏–∫:', multiplier);";
  page += "});";
  
  // –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–∂–æ–π—Å—Ç–∏–∫–∞
  page += "const joystickContainer = document.getElementById('joystickContainer');";
  page += "const joystickDot = document.getElementById('joystickDot');";
  page += "let dragging = false;";
  page += "joystickContainer.addEventListener('pointerdown', function(e) {";
  page += "  if (e.target !== joystickContainer) return;";
  page += "  dragging = true;";
  page += "  joystickContainer.setPointerCapture(e.pointerId);";
  page += "  updateJoystick(e);";
  page += "});";
  page += "joystickContainer.addEventListener('pointermove', function(e) {";
  page += "  if (dragging && e.target === joystickContainer) { updateJoystick(e); }";
  page += "});";
  page += "joystickContainer.addEventListener('pointerup', function(e) { dragging = false; });";
  
  // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–º—É –∫–ª—ñ–∫—É
  page += "joystickContainer.addEventListener('dblclick', function(e) {";
  page += "  const rect = joystickContainer.getBoundingClientRect();";
  page += "  let centerX = rect.width / 2, centerY = rect.height / 2;";
  page += "  joystickDot.style.left = centerX + 'px';";
  page += "  joystickDot.style.top = centerY + 'px';";
  page += "  angle = 90; speed = 0; updateDisplay();";
  page += "  console.log('–î–∂–æ–π—Å—Ç–∏–∫ —Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–æ');";
  page += "});";
  
  page += "function updateJoystick(e) {";
  page += "  const rect = joystickContainer.getBoundingClientRect();";
  page += "  let x = e.clientX - rect.left;";
  page += "  let y = e.clientY - rect.top;";
  page += "  x = Math.max(0, Math.min(rect.width, x));";
  page += "  y = Math.max(0, Math.min(rect.height, y));";
  page += "  joystickDot.style.left = x + 'px';";
  page += "  joystickDot.style.top = y + 'px';";
  page += "  angle = Math.round(minAngle + (x / rect.width) * (maxAngle - minAngle));";
  page += "  speed = Math.round(((rect.height/2 - y) / (rect.height/2)) * 100 * multiplier);";
  page += "  updateDisplay();";
  page += "}";
  
  page += "</script>";
  page += "</body></html>";
  
  request->send(200, "text/html; charset=UTF-8", page);
}

//
void handleSettings(AsyncWebServerRequest *request) {
  String page = "<h1>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h1>";
  //page += "<form action='/save' method='GET'>";
  
      // –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–º—ñ–Ω–Ω–∏—Ö
  page += "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–æ: <input name='servang' type='number' step='0.1' value='" + String(currentServoAngle, 1) + "'><br>";
  //page += "–∏–æ—Ä–æ—Ä: <input name='–ø—É–º–ø—É—Ä—É–º type='number' step='0.1' value='" + String(hysteresis, 1) + "'><br>";
  //page += "—Ä–æ–æ—Ä–ø–º: <input name='–ø–∞–º–ø–∞—Ä–∞–º' type='number' value='" + String(sleepMinutes) + "'><br>";
  
  page += "<input type='submit' value='–ó–±–µ—Ä–µ–≥—Ç–∏'>";
  page += "</form><br>";
  page += "<a href='/'>‚Üê –ù–∞–∑–∞–¥</a>";

  request->send(200, "text/html; charset=UTF-8", page); // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
 }
//
void handleSave(AsyncWebServerRequest *request) {
  DEBUG_PRINTLN("–§—É–Ω–∫—Ü—ñ—è /save –≤–∏–∫–ª–∏–∫–∞–Ω–∞");
     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –∑–∞–ø–∏—Ç—ñ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö
     //–∑–∞–≥–æ—Ç–æ–≤–∫–∞. –∫–æ–¥ –ø–æ–∫–∏ –∑ —ñ–Ω—à–æ–≥–æ —Å–∫–µ—Ç—á—É
  if (request->hasArg("servang")) {
  // NEW_targetTemp = server.arg("targetTemp").toFloat();  // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è targetTemp
  currentServoAngle = request->arg("servang").toInt();
  }
  //if (server.hasArg("hysteresis")) {
  //  NEW_hysteresis = server.arg("hysteresis").toFloat();  // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è hysteresis
  //}
  //if (server.hasArg("sleepMinutes")) {
  //  NEW_sleepMinutes = server.arg("sleepMinutes").toInt();  // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è sleepMinutes
  moveServoTo(); // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É —Å–µ—Ä–≤–æ
      DEBUG_PRINT("–ù–æ–≤–∏–π –∫—É—Ç —Å–µ—Ä–≤–æ: ");
      DEBUG_PRINTLN(currentServoAngle);
  DEBUG_PRINTLN("–§—É–Ω–∫—Ü—ñ—è –≤–µ–± /–∑–±–µ—Ä–µ–≥—Ç–∏/ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î ");
  request->send(200, "text/html; charset=UTF-8", "<script>window.location='/';</script>");
  }
//
//
//
void setup() {
    delay(1000);
 #ifdef DEBUG_SERIAL
    Serial.begin(115200);
    Serial.println("DEBUG —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í–≤–æ–¥—å –∑–º—ñ–Ω–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: name = value");
 #endif
 //–ø–µ–¥–∞–ª—ñ, –∫–Ω–æ–ø–∫–∏
  pinMode(PIN_SWITCH1, INPUT_PULLUP);
  pinMode(PIN_SWITCH2, INPUT_PULLUP);
  pinMode(PIN_PEDAL,   INPUT_PULLUP);
  pedalStableState = HIGH;
  switch1StableState = HIGH;
  switch2StableState = HIGH;

 //–≤–º–∏–∫–∞—á—ñ –≤—Å—è–∫–æ–≥–æ
  pinMode(PIN_SERVO_POWER, OUTPUT);
  pinMode(PIN_HEADLIGHT,   OUTPUT);
  
  //pinMode(PIN_MOTOR_EN,    OUTPUT);
  
 // –∑–∞–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –®–ò–ú-–∫–∞–Ω–∞–ª–∞ –º–æ—Ç–æ—Ä–∞:    
  ledcAttach(PIN_MOTOR_IN1,  PWM_FREQ, PWM_RESOLUTION);      //–ø—ñ–Ω –¥–ª—è –∫–∞–Ω–∞–ª—É 1(—Ä—É—Ö –≤–ø–µ—Ä–µ–¥)
  ledcAttach(PIN_MOTOR_IN2,  PWM_FREQ, PWM_RESOLUTION);      //–ø—ñ–Ω –¥–ª—è –∫–∞–Ω–∞–ª—É 2(—Ä—É—Ö –≤–ø–µ—Ä–µ–¥)
  //digitalWrite(PIN_MOTOR_EN, LOW);

 //–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –®–ò–ú-–∫–∞–Ω–∞–ª–∞ —Å–µ—Ä–≤–æ: 
  steeringServo.attach(PIN_SERVO_PWM, 500, 2500); // 500 ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ —ñ–º–ø—É–ª—å—Å—É (0¬∞ –∞–±–æ –∫—Ä–∞–π–Ω—ñ–π –ª—ñ–≤–∏–π –ø–æ–≤–æ—Ä–æ—Ç)
                                                  // 2500 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ (180¬∞ –∞–±–æ –∫—Ä–∞–π–Ω—ñ–π –ø—Ä–∞–≤–∏–π –ø–æ–≤–æ—Ä–æ—Ç)

 //–≤—Å—è–∫–µ - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω                                                   
  currentServoAngle=neutralServoAngle;
  moveServoTo();     //—Ä—É—Ö —Å–µ—Ä–≤–∏ –≤ —Ü–µ–Ω—Ç—Ä
  digitalWrite(PIN_SERVO_POWER, LOW); //
  digitalWrite(PIN_HEADLIGHT, LOW);
  stopMotor();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebSocket: —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
  ws.onEvent(onWsEvent);
  server.addHandler(&ws);

  // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Å—Ç–∏–π)
  server.on("/", HTTP_GET, handleWEB);               // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
  server.on("/settings", HTTP_GET, handleSettings);  // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ñ–æ—Ä–º–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  server.on("/save", HTTP_GET, handleSave);          // –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  
  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi
WiFi.begin(ssid, password);
DEBUG_PRINT("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ");
DEBUG_PRINTLN(ssid);

// –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
int attempts = 0;
while (WiFi.status() != WL_CONNECTED && attempts < 20) {
  delay(500);
  DEBUG_PRINT(".");
  attempts++;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
if (WiFi.status() == WL_CONNECTED) {
  DEBUG_PRINTLN("\n–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ! IP –∞–¥—Ä–µ—Å–∞: ");
  DEBUG_PRINTLN(WiFi.localIP());

  server.begin();  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi!)
    DEBUG_PRINTLN("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");
  } else {
    DEBUG_PRINTLN("\n–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è!");
  }


  DEBUG_PRINTLN("Setup .... –æ–∫!");
 }
//
void loop() {
  handleWebServoControl();  // –°–µ—Ä–≤–æ–ø—Ä–∏–≤—ñ–¥ –∑–∞–≤–∂–¥–∏ –∫–µ—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–µ–±
  updateServo(); //–≤–∏–º–∏–∫–∞—î —Å–µ—Ä–≤—É –ø—ñ—Å–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

  unsigned long currentMillis = millis();
   
    #ifdef DEBUG_SERIAL
    handleSerialInput();
    #endif

    if (motorControlIntercepted) {
    if (currentMillis - lastWebCommandTime > webControlTimeout) {
      motorControlIntercepted = false;  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
      stopMotor();                      // –ó—É–ø–∏–Ω–∏—Ç–∏ –¥–≤–∏–≥—É–Ω –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
      servoMode = SERVO_SOFT;          // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º‚Äô—è–∫–æ–≥–æ —Ä–µ–∂–∏–º—É
      DEBUG_PRINTLN("–í—Ç—Ä–∞—Ç–∞ –∑–≤‚Äô—è–∑–∫—É –∑–≥—ñ–¥–Ω–æ –∑ WebSocket, —Ä–µ–∂–∏–º = SERVO_SOFT");
     } else {
     handleWebMotorControl();          // –í–µ–±-–∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–≤–∏–≥—É–Ω–æ–º
     }
     }
 //
  if (!motorControlIntercepted) {
   servoMode = SERVO_SOFT; // –ú‚Äô—è–∫–∏–π —Ä–µ–∂–∏–º —ñ –ª–æ–∫–∞–ª—å–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
   // –î—Ä–µ–±–µ–∑–≥ –∫–Ω–æ–ø–æ–∫, —á–∏—Ç–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫  
   bool pedalInput = digitalRead(PIN_PEDAL);  // –ó—á–∏—Ç—É—î–º–æ —Å—Ç–∞–Ω –ø–µ–¥–∞–ª—ñ
   bool switch1Input = digitalRead(PIN_SWITCH1);  // –ó—á–∏—Ç—É—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä—à–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
   bool switch2Input = digitalRead(PIN_SWITCH2);  // –ó—á–∏—Ç—É—î–º–æ —Å—Ç–∞–Ω –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
  //
  // –Ø–∫—â–æ —Å—Ç–∞–Ω –±—É–¥—å-—è–∫–æ—ó –∫–Ω–æ–ø–∫–∏ –∑–º—ñ–Ω–∏–≤—Å—è —ñ –ø—Ä–æ–π—à–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏ (debounce), 
    if ((pedalInput != pedalStableState || 
         switch1Input != switch1StableState || 
         switch2Input != switch2StableState) && (millis() - lastDebounceTime) > debounceDelay) {
         //–æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏
         pedalStableState = pedalInput;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–µ–¥–∞–ª—ñ
         switch1StableState = switch1Input;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä—à–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
         switch2StableState = switch2Input;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
         // –≤–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ª–∞–¥–∫—É –≤ —Å–µ—Ä—ñ–∞–ª
         DEBUG_PRINT("–ü–µ–¥–∞–ª—å: "); DEBUG_PRINT(pedalStableState == LOW ? "–ù–∞–∂–∞—Ç–∞   " : "–í—ñ–¥–ø—É—â–µ–Ω–∞");
         DEBUG_PRINT(", Switch1: "); DEBUG_PRINT(switch1StableState == LOW ? "–≤–∫–ª –≤–ø–µ—Ä–µ–¥    " : "–Ω–∞–∑–∞–¥ –≤–∏–º–∫–Ω–µ–Ω–æ");
         DEBUG_PRINT(", Switch2: "); DEBUG_PRINTLN(switch2StableState == LOW ? "–≤–∫–ª –Ω–∞–∑–∞–¥      " : "–≤–ø–µ—Ä–µ–¥ –≤–∏–º–∫–Ω–µ–Ω–æ");
         lastDebounceTime = millis();  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏
         }

  if (pedalStableState == LOW && switch1StableState == LOW) { 
    targetSpeed = 100; 
    MotorForward();
    DEBUG_PRINTLN("–í–ü–ï–†–ï–î!");
 } else if (pedalStableState == LOW && switch2StableState == LOW) { 
    targetSpeed = 95;
    MotorReverse();
    DEBUG_PRINTLN("–ù–ê–ó–ê–î");
 } else {
    stopMotor();
    }

    MotorUpdate();
 
 
 // unsigned long now = millis();
 // if (now - previousMillis >= 100) {
//  previousMillis = now;
 // }
}
}
